#!/usr/bin/env bash

VER=${1}
KERNEL=${2}
echo "ARGS: $*"
echo "VER: $VER"
echo "KERNEL: $KERNEL"

# Option 1, wrap uImage manually
# uImage compression options: none, bzip2, gzip, lz4, lzma, lzo, zstd
FCOMP="$(file -i "$KERNEL")"
if echo "$FCOMP" | ! grep -q executable; then
  echo "Error: vmlinux needs to be decompressed"
	exit 1
fi
#if echo "$FCOMP" | grep -q gzip; then
#	echo "Detected gzip kernel"
#	gzip -d "$KERNEL"
#elif echo "$FCOMP" | grep -q bzip2; then
#	echo "Detected bzip2 kernel"
#	bzip2 -d "$KERNEL"
#elif echo "$FCOMP" | grep -q lzma; then
#	echo "Detected lzma kernel"
#	lzma -d "$KERNEL"
#elif echo "$FCOMP" | grep -q lz4; then
#	echo "Detected lz4 kernel"
#	lz4 -d "$KERNEL"
#elif echo "$FCOMP" | grep -q zstd; then
#	echo "Detected zstd kernel"
#	zstd -d "$KERNEL"
#else
#	echo "Assuming uncompressed kernel"
#fi

# extract binary from vmlinux (elf)
IN=$(mktemp)
objcopy -O binary "$KERNEL" "$IN"

# default: compress with gzip
gzip --best "$IN"
IN="$IN.gz"
COMP="gzip"

# wrap binary (compressed) with uImage header
ofile="${KERNEL/vmlinux/uImage}"
membase=`objdump -p "$KERNEL" | grep -m 1 LOAD | awk '{print $7}'`
rm -f "$ofile"
mkimage -A powerpc -O linux -T kernel -C "$COMP" -a "$membase" -e "$membase" -n "Gentoo Linux $VER" -d "$IN" "$ofile"
rm -f "$IN"


# Option 2, leverge kernel's uboot wrapper
# mimiking arch/powerpc/boot/.uImage.cmd generated during make uImage
#"${srcdir}/arch/powerpc/boot/wrapper" -Z gz -c -o "${KERNEL/vmlinux/uImage}" -p uboot "${IN}"

